echo Refresh the source of the Bibledit kernel on macOS for macOS.

SCRIPTDIR=`dirname $0`
cd $SCRIPTDIR
SCRIPTDIR=`pwd`
if [ $? != 0 ]; then exit; fi
WEBROOT=$SCRIPTDIR/webroot
echo Synchronizing relevant source code to $WEBROOT
mkdir -p $WEBROOT
rsync --archive --delete --exclude=.git ../../cloud/ $WEBROOT/
if [ $? != 0 ]; then exit; fi

echo From now on the working directory is the webroot location.
pushd $WEBROOT
if [ $? != 0 ]; then exit; fi
echo Current directory: `pwd`

echo Do a dist-clean of the Bibledit library.
./configure
if [ $? != 0 ]; then exit; fi
make distclean
if [ $? != 0 ]; then exit; fi

echo Update the build configuration and reconfigure.
sed -i.bak '/mbedtls_ssl_init/d' configure.ac
sed -i.bak 's/ unittest / /g' Makefile.am
sed -i.bak '/UTF8PROC/d' Makefile.am
sed -i.bak '/GUMBO/d' Makefile.am
sed -i.bak '/PUGIXM/d' Makefile.am
sed -i.bak '/GTEST/d' Makefile.am
./reconfigure

echo Configure Bibledit in client mode.
./configure --enable-mac
if [ $? != 0 ]; then exit; fi
# Do not set the network port.
# The Bibledit kernel will negotiate its own network port number.
# echo 9876 > config/network-port
# if [ $? != 0 ]; then exit; fi

sed -i.bak 's#/opt/local/include#. -I..#g' Makefile
if [ $? != 0 ]; then exit; fi
sed -i.bak 's#/opt/local/lib#.#g' Makefile
if [ $? != 0 ]; then exit; fi
sed -i.bak '/SWORD_CFLAGS =/d' Makefile
if [ $? != 0 ]; then exit; fi
sed -i.bak '/SWORD_LIBS =/d' Makefile
if [ $? != 0 ]; then exit; fi
sed -i.bak '/OPENSSL_LIBS =/d' Makefile
if [ $? != 0 ]; then exit; fi
sed -i.bak 's#-lmimetic# #g' Makefile
if [ $? != 0 ]; then exit; fi
sed -i.bak '/ICU_CFLAGS =/d' Makefile
if [ $? != 0 ]; then exit; fi
sed -i.bak '/ICU_LIBS =/d' Makefile
if [ $? != 0 ]; then exit; fi
sed -i.bak '/XML2_CFLAGS =/d' Makefile
if [ $? != 0 ]; then exit; fi
sed -i.bak '/XML2_LIBS =/d' Makefile
if [ $? != 0 ]; then exit; fi

echo Update the configuration.
sed -i.bak '/HAVE_ICU/d' config.h
if [ $? != 0 ]; then exit; fi
sed -i.bak '/HAVE_UTF8PROC/d' config.h
if [ $? != 0 ]; then exit; fi
sed -i.bak '/HAVE_PUGIXML/d' config.h
if [ $? != 0 ]; then exit; fi
sed -i.bak '/HAVE_GTEST/d' config.h
if [ $? != 0 ]; then exit; fi
sed -i.bak '/CONFIG_ENABLE_FILE_UPLOAD/d' config/config.h
if [ $? != 0 ]; then exit; fi

echo Remove the data generation
rm -rf sources
rm executable/generate.*
echo Remove the unit tests
rm -rf unittests
echo Remove internationalisation helper
rm -rf i18n
echo Remove examples
find . -name exampleProgram.cpp -delete
echo Remove main executable code
rm executable/bibledit.*
rm sqlite/shell.c
echo Remove MbedTLS 3.x and enable version 2.x
rm -rf mbedtls
if [ $? != 0 ]; then exit; fi
mv mbedtls2 mbedtls
if [ $? != 0 ]; then exit; fi

echo Copy the source code to the kernel folder.
pwd
KERNELDIR=$SCRIPTDIR/Bibledit/kernel
rsync --archive --delete ./ $KERNELDIR/
if [ $? != 0 ]; then exit; fi

echo Return to the project directory where this script is located.
popd
pwd

echo Remove the source code from $WEBROOT.
find $WEBROOT \( -name "*.h" -o -name "*.cpp" -o -name "*.cxx" -o -name "*.hpp" -o -name "*.c" \) -delete
echo Remove everything but the source code from $KERNELDIR.
find $KERNELDIR -not \( -name "*.h" -o -name "*.cpp" -o -name "*.cxx" -o -name "*.hpp" -o -name "*.c" \) -delete

echo Removing non-essential files.
find . -name "*.bak" -delete
find . -name "*.o" -delete
find . -name "*.in" -delete
find . -name "*.m4" -delete
find . -name "autom*cache" -exec rm -r "{}" \; > /dev/null 2>&1
find . -name "bibledit" -delete
find . -name "compile" -delete
rm $WEBROOT/config.*
rm $WEBROOT/configure*
rm $WEBROOT/depcomp
rm $WEBROOT/dev
rm $WEBROOT/install-sh
rm $WEBROOT/missing
rm $WEBROOT/reconfigure
rm $WEBROOT/valgrind
find . -name ".deps" -exec rm -r "{}" \; > /dev/null 2>&1
find . -name ".dirstamp" -delete
rm $WEBROOT/Makefile*
rm -f $WEBROOT/server
rm -f $WEBROOT/unittest
rm $WEBROOT/stamp-h1
rm -f $WEBROOT/generate
rm -rf $WEBROOT/sources
rm -rf $WEBROOT/unittests
find .. -name "*.sh" -delete
rm -rf $WEBROOT/xcode.xcodeproj
rm -rf $WEBROOT/.github
rm -f $WEBROOT/.gitignore

echo To graphically build the app for macOS, open the project in Xcode:
echo open $SCRIPTDIR/Bibledit.xcodeproj
echo Then build it from within Xcode
